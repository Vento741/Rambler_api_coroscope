#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenRouter
"""
import os
import json
import asyncio
import logging
import argparse
from typing import Dict, Any

import aiohttp
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_api_key(api_key: str, model: str) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {model}...")
    
    url = "https://openrouter.ai/api/v1/chat/completions"
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}",
        "HTTP-Referer": "https://puzzlebot.top",
        "X-Title": "PuzzleBot API Key Test"
    }
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API."},
            {"role": "user", "content": "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –ü—Ä–∏–≤–µ—Ç!"}
        ],
        "max_tokens": 10,
        "temperature": 0.5
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                url,
                headers=headers,
                json=payload,
                timeout=10
            ) as response:
                status = response.status
                try:
                    result = await response.json()
                except:
                    result = {"error": await response.text()}
                
                logger.info(f"–°—Ç–∞—Ç—É—Å: {status}")
                if status == 200:
                    if "choices" in result and result["choices"]:
                        content = result["choices"][0].get("message", {}).get("content", "")
                        logger.info(f"–û—Ç–≤–µ—Ç: {content}")
                        return {
                            "status": "success",
                            "model": model,
                            "content": content
                        }
                    else:
                        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {json.dumps(result)}")
                        return {
                            "status": "error",
                            "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞",
                            "response": result
                        }
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {json.dumps(result)}")
                    return {
                        "status": "error",
                        "error": f"–°—Ç–∞—Ç—É—Å {status}",
                        "response": result
                    }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return {
            "status": "error",
            "error": str(e)
        }

async def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π"""
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –º–æ–¥–µ–ª–∏ –∏ –∏—Ö –∫–ª—é—á–∏
    models = {
        "google/gemini-2.0-flash-exp:free": "API_for_Gemini_2.0_Flash_Exp_free",
        "google/gemini-2.0-flash-001": "API_for_Gemini_2.0_Flash",
        "qwen/qwen2.5-vl-72b-instruct:free": "Qwen2.5_VL_72B_Instruct_free",
        "deepseek/deepseek-prover-v2:free": "DeepSeek_Prover_V2_free"
    }
    
    results = {}
    missing_keys = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
    for model, env_var in models.items():
        api_key = os.getenv(env_var)
        if not api_key:
            logger.warning(f"üî¥ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á –¥–ª—è {model} (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {env_var})")
            missing_keys.append(env_var)
            results[model] = {"status": "missing"}
        else:
            logger.info(f"üü¢ –ù–∞–π–¥–µ–Ω –∫–ª—é—á –¥–ª—è {model} (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {env_var})")
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
            if args.test:
                result = await test_api_key(api_key, model)
                results[model] = result
            else:
                results[model] = {"status": "found"}
    
    return {
        "results": results,
        "missing_keys": missing_keys
    }

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π OpenRouter...")
    
    results = await check_env_file()
    
    # –ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò API –ö–õ–Æ–ß–ï–ô")
    print("="*50)
    
    for model, result in results["results"].items():
        status = result["status"]
        if status == "missing":
            print(f"üî¥ {model}: –ö–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        elif status == "found":
            print(f"üü° {model}: –ö–ª—é—á –Ω–∞–π–¥–µ–Ω (–±–µ–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
        elif status == "success":
            print(f"üü¢ {model}: –ö–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–≤–µ—Ç: {result.get('content', '')}")
        else:
            print(f"üî¥ {model}: –û—à–∏–±–∫–∞ - {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenRouter URL
    url = os.getenv("URL_LINK_OPENROUTER")
    if url:
        print(f"\nüîµ URL OpenRouter: {url}")
    else:
        print("\nüî¥ URL OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if results["missing_keys"]:
        print("\n‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("–î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª:")
        for key in results["missing_keys"]:
            print(f"  {key}=sk-or-v1-...")
    
    print("\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π OpenRouter")
    parser.add_argument("--test", action="store_true", help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏")
    args = parser.parse_args()
    
    asyncio.run(main()) 