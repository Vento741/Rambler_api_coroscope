#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
"""
import sys
import json
import argparse
import requests
from datetime import datetime

def check_endpoint(url, name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    try:
        start_time = datetime.now()
        response = requests.get(url, timeout=5)
        duration = (datetime.now() - start_time).total_seconds()
        
        status_code = response.status_code
        
        if status_code == 200:
            print(f"‚úÖ {name}: OK (—Å—Ç–∞—Ç—É—Å {status_code}, –≤—Ä–µ–º—è {duration:.2f}—Å)")
            try:
                return response.json()
            except:
                print(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON: {response.text[:100]}")
                return None
        else:
            print(f"‚ùå {name}: –û–®–ò–ë–ö–ê (—Å—Ç–∞—Ç—É—Å {status_code}, –≤—Ä–µ–º—è {duration:.2f}—Å)")
            print(f"  –û—Ç–≤–µ—Ç: {response.text[:100]}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå {name}: –ù–ï–î–û–°–¢–£–ü–ï–ù ({str(e)})")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--host", default="81.177.6.93", help="–•–æ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    parser.add_argument("--port", type=int, default=8080, help="–ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    parser.add_argument("--local", action="store_true", help="–ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (127.0.0.1)")
    args = parser.parse_args()
    
    host = "127.0.0.1" if args.local else args.host
    port = args.port
    base_url = f"http://{host}:{port}"
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {base_url}\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ health —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    health_data = check_endpoint(f"{base_url}/health", "Health Check")
    
    if health_data:
        print(f"  –°—Ç–∞—Ç—É—Å: {health_data.get('status', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"  –í–µ—Ä—Å–∏—è: {health_data.get('version', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    calendar_data = check_endpoint(f"{base_url}/api/v1/moon-calendar/current", "Moon Calendar")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API astro_bot –¥–ª—è free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    astro_free_data = check_endpoint(f"{base_url}/api/v1/astro_bot/moon_day?user_type=free", "Astro Bot (free)")
    
    if astro_free_data:
        success = astro_free_data.get('success', False)
        cached = astro_free_data.get('cached', False)
        model = astro_free_data.get('model', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        error = astro_free_data.get('error', None)
        
        print(f"  –£—Å–ø–µ—Ö: {'‚úÖ' if success else '‚ùå'}")
        print(f"  –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ' if cached else '‚ùå'}")
        print(f"  –ú–æ–¥–µ–ª—å: {model}")
        
        if error:
            print(f"  –û—à–∏–±–∫–∞: {error}")
        elif 'data' in astro_free_data:
            data_length = len(astro_free_data.get('data', ''))
            print(f"  –î–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: {data_length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"  –ü—Ä–µ–≤—å—é: {astro_free_data.get('data', '')[:100]}...")
    
    print("\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main() 