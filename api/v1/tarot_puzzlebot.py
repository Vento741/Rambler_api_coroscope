"""
–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ –¢–∞—Ä–æ —á–µ—Ä–µ–∑ PuzzleBot
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å PuzzleBot
"""
from typing import Optional, Dict, Any
from fastapi import APIRouter, HTTPException, Query, Path, Response
from datetime import datetime
import json

from modules.tarot.models import PuzzleBotResponse
from modules.tarot.openrouter_service import TarotOpenRouterService
from modules.tarot.data import get_all_cards, get_card_by_id, get_all_spreads, get_spread_by_id
from core.cache import CacheManager
from core.openrouter_client import OpenRouterClient
import config

router = APIRouter(prefix="/api/v1/puzzlebot/tarot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
cache_manager = CacheManager(ttl_minutes=config.CACHE_TTL_MINUTES)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
openrouter_client = OpenRouterClient(
    api_url=config.OPENROUTER_API_URL,
    api_keys=config.OPENROUTER_API_KEYS,
    models=config.OPENROUTER_MODELS,
    model_configs=config.OPENROUTER_MODEL_CONFIGS,
    model_api_keys=config.OPENROUTER_MODEL_API_KEYS,
    timeout=30
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
tarot_service = TarotOpenRouterService(
    cache_manager=cache_manager,
    openrouter_client=openrouter_client,
    prompts_config=config.TAROT_PROMPTS
)

@router.get("/reading", response_model=Dict[str, Any])
async def get_puzzlebot_reading(
    spread_id: int = Query(..., description="ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞"),
    question: Optional[str] = Query(None, description="–í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è"),
    user_type: str = Query("free", description="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ –¥–ª—è PuzzleBot
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–ª—è PuzzleBot —Å –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.
    
    - **spread_id**: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
    - **question**: –í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_type not in ["free", "premium"]:
            return {"api_result_text": f"–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: free, premium"}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞
        spread = get_spread_by_id(spread_id)
        if not spread:
            return {"api_result_text": f"–û—à–∏–±–∫–∞: –†–∞—Å–∫–ª–∞–¥ —Å ID {spread_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è
        response = await tarot_service.get_tarot_reading(
            spread_id=spread_id,
            question=question,
            user_type=user_type
        )
        
        # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response.success:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —É–¥–æ–±–Ω—É—é –¥–ª—è PuzzleBot
            reading_data = {
                "spread_id": spread_id,
                "spread_name": spread["name"],
                "question": question if question else "–û–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ",
                "timestamp": datetime.now().isoformat(),
                "cards": response.data["cards"],
                "interpretation": response.data["interpretation"],
                "card_count": len(response.data["cards"])
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å URLs –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ PuzzleBot
            cards_urls = [card["card_image_url"] for card in response.data["cards"]]
            positions = [card["position_name"] for card in response.data["cards"]]
            
            reading_data["card_urls"] = ",".join(cards_urls)
            reading_data["positions"] = ",".join(positions)
            
            # –°–æ–∑–¥–∞–µ–º HTML-—Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç –≤ PuzzleBot
            html_cards = ""
            for card in response.data["cards"]:
                html_cards += f'<div class="tarot-card">'
                html_cards += f'<img src="{card["card_image_url"]}" alt="{card["card_name"]}" />'
                html_cards += f'<div class="position">{card["position_name"]}</div>'
                html_cards += f'<div class="card-name">{card["card_name"]} {"(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)" if card["is_reversed"] else ""}</div>'
                html_cards += f'</div>'
            
            reading_data["html_cards"] = html_cards
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–±–æ—Ç–∞
            text_result = f"üîÆ {spread['name']} üîÆ\n\n"
            text_result += f"–í–æ–ø—Ä–æ—Å: {question if question else '–û–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ'}\n\n"
            text_result += "–í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã:\n"
            
            for card in response.data["cards"]:
                text_result += f"‚Ä¢ {card['position_name']}: {card['card_name']} {'(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' if card['is_reversed'] else ''}\n"
            
            text_result += "\nüåü –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è üåü\n\n"
            text_result += response.data["interpretation"]
            
            reading_data["text_result"] = text_result
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ PuzzleBot
            return {"api_result_text": text_result}
        else:
            return {"api_result_text": f"–û—à–∏–±–∫–∞: {response.error}"}
    except Exception as e:
        return {"api_result_text": f"–û—à–∏–±–∫–∞: {str(e)}"}

@router.get("/card/{card_id}", response_model=Dict[str, Any])
async def get_puzzlebot_card(
    card_id: int = Path(..., description="ID –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–µ –¢–∞—Ä–æ –¥–ª—è PuzzleBot
    
    - **card_id**: ID –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ
    """
    try:
        card = get_card_by_id(card_id)
        if not card:
            return {"api_result_text": f"–û—à–∏–±–∫–∞: –ö–∞—Ä—Ç–∞ —Å ID {card_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        text_result = f"üîÆ {card['name']} üîÆ\n\n"
        text_result += f"–ê—Ä–∫–∞–Ω: {card['arcana']}"
        if card['suit']:
            text_result += f", –ú–∞—Å—Ç—å: {card['suit']}\n\n"
        else:
            text_result += "\n\n"
        
        text_result += f"{card['description']}\n\n"
        
        text_result += "üåû –í –ø—Ä—è–º–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ üåû\n"
        text_result += f"{card['meaning_upright']}\n"
        text_result += f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(card['keywords_upright'])}\n\n"
        
        text_result += "üåö –í –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ üåö\n"
        text_result += f"{card['meaning_reversed']}\n"
        text_result += f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(card['keywords_reversed'])}"
        
        return {"api_result_text": text_result}
    except Exception as e:
        return {"api_result_text": f"–û—à–∏–±–∫–∞: {str(e)}"}

@router.get("/spread/{spread_id}", response_model=Dict[str, Any])
async def get_puzzlebot_spread(
    spread_id: int = Path(..., description="ID —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–∫–ª–∞–¥–µ –¢–∞—Ä–æ –¥–ª—è PuzzleBot
    
    - **spread_id**: ID —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ
    """
    try:
        spread = get_spread_by_id(spread_id)
        if not spread:
            return {"api_result_text": f"–û—à–∏–±–∫–∞: –†–∞—Å–∫–ª–∞–¥ —Å ID {spread_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞
        text_result = f"üîÆ {spread['name']} üîÆ\n\n"
        text_result += f"{spread['description']}\n\n"
        text_result += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç: {spread['card_count']}\n\n"
        
        text_result += "–ü–æ–∑–∏—Ü–∏–∏ –∫–∞—Ä—Ç:\n"
        for position in spread['positions']:
            text_result += f"‚Ä¢ {position['name']}: {position['description']}\n"
        
        return {"api_result_text": text_result}
    except Exception as e:
        return {"api_result_text": f"–û—à–∏–±–∫–∞: {str(e)}"}

@router.get("/daily_card", response_model=Dict[str, Any])
async def get_puzzlebot_daily_card(
    user_type: str = Query("free", description="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è –¥–ª—è PuzzleBot
    
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ–¥–Ω—É –∫–∞—Ä—Ç—É (ID = 1)
    return await get_puzzlebot_reading(
        spread_id=1,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ä–∞—Å–∫–ª–∞–¥ —Å ID=1 - —ç—Ç–æ —Ä–∞—Å–∫–ª–∞–¥ "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
        question="–ö–∞—Ä—Ç–∞ –¥–Ω—è",
        user_type=user_type
    )

@router.get("/spreads_list", response_model=Dict[str, Any])
async def get_puzzlebot_spreads_list():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ –¥–ª—è PuzzleBot
    """
    try:
        spreads = get_all_spreads()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
        text_result = "üîÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ üîÆ\n\n"
        
        for spread in spreads:
            text_result += f"ID: {spread['id']} - {spread['name']} ({spread['card_count']} –∫–∞—Ä—Ç)\n"
            text_result += f"{spread['description']}\n\n"
        
        return {"api_result_text": text_result}
    except Exception as e:
        return {"api_result_text": f"–û—à–∏–±–∫–∞: {str(e)}"}

@router.get("/cards_list", response_model=Dict[str, Any])
async def get_puzzlebot_cards_list(
    arcana: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∞—Ä–∫–∞–Ω–∞ (–°—Ç–∞—Ä—à–∏–π/–ú–ª–∞–¥—à–∏–π)"),
    suit: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Å—Ç–∏ (–¥–ª—è –ú–ª–∞–¥—à–∏—Ö –∞—Ä–∫–∞–Ω–æ–≤)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç –¢–∞—Ä–æ –¥–ª—è PuzzleBot
    
    - **arcana**: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∞—Ä–∫–∞–Ω–∞ (–°—Ç–∞—Ä—à–∏–π/–ú–ª–∞–¥—à–∏–π)
    - **suit**: –§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Å—Ç–∏ (–¥–ª—è –ú–ª–∞–¥—à–∏—Ö –∞—Ä–∫–∞–Ω–æ–≤)
    """
    try:
        cards = get_all_cards()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if arcana:
            cards = [card for card in cards if card["arcana"].lower() == arcana.lower()]
        
        if suit:
            cards = [card for card in cards if card.get("suit") and card["suit"].lower() == suit.lower()]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç
        if arcana and suit:
            title = f"üîÆ –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ: {arcana} –∞—Ä–∫–∞–Ω, –º–∞—Å—Ç—å {suit} üîÆ"
        elif arcana:
            title = f"üîÆ –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ: {arcana} –∞—Ä–∫–∞–Ω üîÆ"
        elif suit:
            title = f"üîÆ –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ: –º–∞—Å—Ç—å {suit} üîÆ"
        else:
            title = "üîÆ –í—Å–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ üîÆ"
        
        text_result = f"{title}\n\n"
        
        for card in cards:
            text_result += f"ID: {card['id']} - {card['name']}"
            if card.get("suit"):
                text_result += f" ({card['suit']})"
            text_result += "\n"
        
        return {"api_result_text": text_result}
    except Exception as e:
        return {"api_result_text": f"–û—à–∏–±–∫–∞: {str(e)}"} 