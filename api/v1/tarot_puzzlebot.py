"""
–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ –¢–∞—Ä–æ —á–µ—Ä–µ–∑ PuzzleBot
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å PuzzleBot
"""
from typing import Optional, Dict, Any
from fastapi import APIRouter, HTTPException, Query, Path, Response
from datetime import datetime, date, time, timedelta
import json
import random

from modules.tarot.models import PuzzleBotResponse
from modules.tarot.openrouter_service import TarotOpenRouterService
from modules.tarot.data import get_all_cards, get_card_by_id, get_all_spreads, get_spread_by_id
from modules.tarot.pdf_generator import TarotPDFGenerator
from core.cache import CacheManager
from core.openrouter_client import OpenRouterClient
import config

router = APIRouter(prefix="/api/v1/puzzlebot/tarot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
cache_manager = CacheManager(ttl_minutes=config.CACHE_TTL_MINUTES)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
openrouter_client = OpenRouterClient(
    api_url=config.OPENROUTER_API_URL,
    api_keys=config.OPENROUTER_API_KEYS,
    models=config.OPENROUTER_MODELS,
    model_configs=config.OPENROUTER_MODEL_CONFIGS,
    model_api_keys=config.OPENROUTER_MODEL_API_KEYS,
    timeout=30
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
tarot_service = TarotOpenRouterService(
    cache_manager=cache_manager,
    openrouter_client=openrouter_client,
    prompts_config=config.TAROT_PROMPTS
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ PDF
pdf_generator = TarotPDFGenerator()

@router.get("/reading", response_model=Dict[str, Any])
async def get_puzzlebot_reading(
    spread_id: int = Query(..., description="ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞"),
    question: Optional[str] = Query(None, description="–í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è"),
    user_type: str = Query("free", description="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ –¥–ª—è PuzzleBot
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–ª—è PuzzleBot —Å –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.
    
    - **spread_id**: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
    - **question**: –í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_type not in ["free", "premium"]:
            return {"api_result_text": f"–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: free, premium"}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞
        spread = get_spread_by_id(spread_id)
        if not spread:
            return {"api_result_text": f"–û—à–∏–±–∫–∞: –†–∞—Å–∫–ª–∞–¥ —Å ID {spread_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è
        response = await tarot_service.get_tarot_reading(
            spread_id=spread_id,
            question=question,
            user_type=user_type
        )
        
        # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response.success:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —É–¥–æ–±–Ω—É—é –¥–ª—è PuzzleBot
            reading_data = {
                "spread_id": spread_id,
                "spread_name": spread["name"],
                "question": question if question else "–û–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ",
                "timestamp": datetime.now().isoformat(),
                "cards": response.data["cards"],
                "interpretation": response.data["interpretation"],
                "card_count": len(response.data["cards"])
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å URLs –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ PuzzleBot
            cards_urls = [card["card_image_url"] for card in response.data["cards"]]
            positions = [card["position_name"] for card in response.data["cards"]]
            
            reading_data["card_urls"] = ",".join(cards_urls)
            reading_data["positions"] = ",".join(positions)
            
            # –°–æ–∑–¥–∞–µ–º HTML-—Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç –≤ PuzzleBot
            html_cards = ""
            for card in response.data["cards"]:
                html_cards += f'<div class="tarot-card">'
                html_cards += f'<img src="{card["card_image_url"]}" alt="{card["card_name"]}" />'
                html_cards += f'<div class="position">{card["position_name"]}</div>'
                html_cards += f'<div class="card-name">{card["card_name"]} {"(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)" if card["is_reversed"] else ""}</div>'
                html_cards += f'</div>'
            
            reading_data["html_cards"] = html_cards
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–±–æ—Ç–∞
            text_result = f"üîÆ {spread['name']} üîÆ\n\n"
            text_result += f"–í–æ–ø—Ä–æ—Å: {question if question else '–û–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ'}\n\n"
            text_result += "–í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã:\n"
            
            for card in response.data["cards"]:
                text_result += f"‚Ä¢ {card['position_name']}: {card['card_name']} {'(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' if card['is_reversed'] else ''}\n"
            
            text_result += "\nüåü –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è üåü\n\n"
            text_result += response.data["interpretation"]
            
            reading_data["text_result"] = text_result
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
            cache_key = f"tarot_reading_data_{spread_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}"
            await cache_manager.set(cache_key, reading_data, ttl_minutes=60)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ 1 —á–∞—Å
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ PDF –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            pdf_link = f"/api/v1/puzzlebot/tarot/reading/pdf?cache_key={cache_key}"
            text_result += f"\n\nüìÑ [–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ PDF]({pdf_link})"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ PuzzleBot
            return {"api_result_text": text_result}
        else:
            return {"api_result_text": f"–û—à–∏–±–∫–∞: {response.error}"}
    except Exception as e:
        return {"api_result_text": f"–û—à–∏–±–∫–∞: {str(e)}"}

@router.get("/reading/pdf", response_class=Response)
async def get_reading_pdf(
    cache_key: str = Query(..., description="–ö–ª—é—á –∫—ç—à–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –≥–∞–¥–∞–Ω–∏—è")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ PDF-—Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≥–∞–¥–∞–Ω–∏—è
    
    - **cache_key**: –ö–ª—é—á –∫—ç—à–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –≥–∞–¥–∞–Ω–∏—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è –∏–∑ –∫—ç—à–∞
        reading_data = await cache_manager.get(cache_key)
        if not reading_data:
            raise HTTPException(
                status_code=404,
                detail="–î–∞–Ω–Ω—ã–µ –≥–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ."
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        pdf_bytes = await pdf_generator.generate_reading_pdf(reading_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        spread_name = reading_data.get("spread_name", "–¢–∞—Ä–æ").replace(" ", "_")
        filename = f"tarot_{spread_name}_{datetime.now().strftime('%Y%m%d%H%M%S')}.pdf"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º PDF-—Ñ–∞–π–ª
        return Response(
            content=pdf_bytes,
            media_type="application/pdf",
            headers={
                "Content-Disposition": f"attachment; filename={filename}"
            }
        )
    except HTTPException as e:
        raise e
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {str(e)}"
        )

@router.get("/card/{card_id}", response_model=Dict[str, Any])
async def get_puzzlebot_card(
    card_id: int = Path(..., description="ID –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–µ –¢–∞—Ä–æ –¥–ª—è PuzzleBot
    
    - **card_id**: ID –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ
    """
    try:
        card = get_card_by_id(card_id)
        if not card:
            return {"api_result_text": f"–û—à–∏–±–∫–∞: –ö–∞—Ä—Ç–∞ —Å ID {card_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        text_result = f"üîÆ {card['name']} üîÆ\n\n"
        text_result += f"–ê—Ä–∫–∞–Ω: {card['arcana']}"
        if card.get('suit'):
            text_result += f", –ú–∞—Å—Ç—å: {card['suit']}\n\n"
        else:
            text_result += "\n\n"
        
        text_result += f"{card['description']}\n\n"
        
        text_result += "üåû –í –ø—Ä—è–º–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ üåû\n"
        text_result += f"{card['meaning_upright']}\n"
        text_result += f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(card['keywords_upright'])}\n\n"
        
        text_result += "üåö –í –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ üåö\n"
        text_result += f"{card['meaning_reversed']}\n"
        text_result += f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(card['keywords_reversed'])}"
        
        return {"api_result_text": text_result}
    except Exception as e:
        return {"api_result_text": f"–û—à–∏–±–∫–∞: {str(e)}"}

@router.get("/spread/{spread_id}", response_model=Dict[str, Any])
async def get_puzzlebot_spread(
    spread_id: int = Path(..., description="ID —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–∫–ª–∞–¥–µ –¢–∞—Ä–æ –¥–ª—è PuzzleBot
    
    - **spread_id**: ID —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ
    """
    try:
        spread = get_spread_by_id(spread_id)
        if not spread:
            return {"api_result_text": f"–û—à–∏–±–∫–∞: –†–∞—Å–∫–ª–∞–¥ —Å ID {spread_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞
        text_result = f"üîÆ {spread['name']} üîÆ\n\n"
        text_result += f"{spread['description']}\n\n"
        text_result += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç: {spread['card_count']}\n\n"
        
        text_result += "–ü–æ–∑–∏—Ü–∏–∏ –∫–∞—Ä—Ç:\n"
        for position in spread['positions']:
            text_result += f"‚Ä¢ {position['name']}: {position['description']}\n"
        
        return {"api_result_text": text_result}
    except Exception as e:
        return {"api_result_text": f"–û—à–∏–±–∫–∞: {str(e)}"}

@router.get("/daily_card", response_model=Dict[str, Any])
async def get_puzzlebot_daily_card(
    user_type: str = Query("free", description="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è –¥–ª—è PuzzleBot
    
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_type not in ["free", "premium"]:
            return {"api_result_text": f"–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: free, premium"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = date.today()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∞ –¥–Ω—è –≤ –∫—ç—à–µ
        cache_key = f"daily_card_{today.isoformat()}"
        daily_card_data = await cache_manager.get(cache_key)
        
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è –Ω–µ—Ç –≤ –∫—ç—à–µ –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞ –¥–µ–Ω—å
        if not daily_card_data:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–Ω—è
            all_cards = get_all_cards()
            if not all_cards:
                return {"api_result_text": "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –¢–∞—Ä–æ"}
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
            daily_card = random.choice(all_cards)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (–ø—Ä—è–º–æ–µ –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ)
            is_reversed = random.choice([True, False])
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã –¥–Ω—è
            daily_card_data = {
                "card": daily_card,
                "is_reversed": is_reversed,
                "date": today.isoformat(),
                "premium_reading": None,
                "free_reading": None
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
            tomorrow = today + timedelta(days=1)
            midnight = datetime.combine(tomorrow, time.min)
            seconds_until_midnight = (midnight - datetime.now()).total_seconds()
            ttl_minutes = max(1, seconds_until_midnight // 60)
            
            await cache_manager.set(cache_key, daily_card_data, ttl_minutes=ttl_minutes)
        
        # –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–Ω—è
        card = daily_card_data["card"]
        is_reversed = daily_card_data["is_reversed"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        interpretation_key = f"{'premium_reading' if user_type == 'premium' else 'free_reading'}"
        
        if daily_card_data.get(interpretation_key) is None:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ OpenRouter
            question = f"–ö–∞—Ä—Ç–∞ –¥–Ω—è: {card['name']} {'(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' if is_reversed else '(–ø—Ä—è–º–∞—è)'}."
            
            response = await tarot_service.get_tarot_reading(
                spread_id=1,  # ID —Ä–∞—Å–∫–ª–∞–¥–∞ "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
                question=question,
                user_type=user_type,
                fixed_cards=[{"card_id": card["id"], "is_reversed": is_reversed}]
            )
            
            if response.success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ –∫—ç—à
                daily_card_data[interpretation_key] = response.data["interpretation"]
                await cache_manager.set(cache_key, daily_card_data, ttl_minutes=ttl_minutes)
            else:
                return {"api_result_text": f"–û—à–∏–±–∫–∞: {response.error}"}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è
        text_result = f"üîÆ –ö–∞—Ä—Ç–∞ –¥–Ω—è - {today.strftime('%d.%m.%Y')} üîÆ\n\n"
        text_result += f"–ö–∞—Ä—Ç–∞: {card['name']} {'(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' if is_reversed else '(–ø—Ä—è–º–∞—è)'}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        text_result += f"{card['description']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏
        if is_reversed:
            text_result += f"–í –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏: {card['meaning_reversed']}\n"
            text_result += f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(card['keywords_reversed'])}\n\n"
        else:
            text_result += f"–í –ø—Ä—è–º–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏: {card['meaning_upright']}\n"
            text_result += f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(card['keywords_upright'])}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        text_result += "üåü –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è üåü\n\n"
        text_result += daily_card_data[interpretation_key]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è PDF
        reading_data = {
            "spread_id": 1,
            "spread_name": "–ö–∞—Ä—Ç–∞ –¥–Ω—è",
            "question": f"–ö–∞—Ä—Ç–∞ –¥–Ω—è –Ω–∞ {today.strftime('%d.%m.%Y')}",
            "timestamp": datetime.now().isoformat(),
            "cards": [{
                "card_id": card["id"],
                "card_name": card["name"],
                "card_image_url": card["image_url"],
                "is_reversed": is_reversed,
                "position_name": "–ö–∞—Ä—Ç–∞ –¥–Ω—è",
                "position_description": "–≠–Ω–µ—Ä–≥–∏—è –∏ –≤–ª–∏—è–Ω–∏–µ –¥–Ω—è"
            }],
            "interpretation": daily_card_data[interpretation_key],
            "card_count": 1
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
        pdf_cache_key = f"tarot_daily_card_{today.isoformat()}_{user_type}"
        await cache_manager.set(pdf_cache_key, reading_data, ttl_minutes=ttl_minutes)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ PDF –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        pdf_link = f"/api/v1/puzzlebot/tarot/reading/pdf?cache_key={pdf_cache_key}"
        text_result += f"\n\nüìÑ [–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ PDF]({pdf_link})"
        
        return {"api_result_text": text_result}
    except Exception as e:
        return {"api_result_text": f"–û—à–∏–±–∫–∞: {str(e)}"}

@router.get("/daily_card/free", response_model=Dict[str, Any])
async def get_puzzlebot_daily_card_free():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return await get_puzzlebot_daily_card(user_type="free")

@router.get("/daily_card/premium", response_model=Dict[str, Any])
async def get_puzzlebot_daily_card_premium():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return await get_puzzlebot_daily_card(user_type="premium")

@router.get("/spreads_list", response_model=Dict[str, Any])
async def get_puzzlebot_spreads_list():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ –¥–ª—è PuzzleBot
    """
    try:
        spreads = get_all_spreads()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
        text_result = "üîÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ üîÆ\n\n"
        
        for spread in spreads:
            text_result += f"{spread['id']}. **{spread['name']}** ({spread['card_count']} –∫–∞—Ä—Ç)\n"
            text_result += f"   {spread['description']}\n\n"
        
        text_result += "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–∫–ª–∞–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /spread —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID —Ä–∞—Å–∫–ª–∞–¥–∞."
        
        return {"api_result_text": text_result}
    except Exception as e:
        return {"api_result_text": f"–û—à–∏–±–∫–∞: {str(e)}"}

@router.get("/cards_list", response_model=Dict[str, Any])
async def get_puzzlebot_cards_list(
    arcana: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∞—Ä–∫–∞–Ω–∞ (–°—Ç–∞—Ä—à–∏–π/–ú–ª–∞–¥—à–∏–π)"),
    suit: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Å—Ç–∏ (–¥–ª—è –ú–ª–∞–¥—à–∏—Ö –∞—Ä–∫–∞–Ω–æ–≤)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç –¢–∞—Ä–æ –¥–ª—è PuzzleBot —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    
    - **arcana**: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∞—Ä–∫–∞–Ω–∞ (–°—Ç–∞—Ä—à–∏–π/–ú–ª–∞–¥—à–∏–π)
    - **suit**: –§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Å—Ç–∏ (–¥–ª—è –ú–ª–∞–¥—à–∏—Ö –∞—Ä–∫–∞–Ω–æ–≤)
    """
    try:
        all_cards = get_all_cards()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
        filtered_cards = all_cards
        
        if arcana:
            filtered_cards = [card for card in filtered_cards if card.get('arcana', '').lower() == arcana.lower()]
        
        if suit:
            filtered_cards = [card for card in filtered_cards if card.get('suit', '').lower() == suit.lower()]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç
        text_result = "üîÆ –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ üîÆ\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
        if arcana:
            text_result += f"–§–∏–ª—å—Ç—Ä –ø–æ –∞—Ä–∫–∞–Ω—É: {arcana}\n"
        if suit:
            text_result += f"–§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Å—Ç–∏: {suit}\n"
        
        text_result += f"–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç: {len(filtered_cards)}\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ –∞—Ä–∫–∞–Ω–∞–º –∏ –º–∞—Å—Ç—è–º –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if len(filtered_cards) > 0:
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞—Ä–∫–∞–Ω–∞–º
            arcana_groups = {}
            for card in filtered_cards:
                arcana_type = card.get('arcana', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–∫–∞–Ω')
                suit_type = card.get('suit', '–ë–µ–∑ –º–∞—Å—Ç–∏')
                
                if arcana_type not in arcana_groups:
                    arcana_groups[arcana_type] = {}
                
                if suit_type not in arcana_groups[arcana_type]:
                    arcana_groups[arcana_type][suit_type] = []
                
                arcana_groups[arcana_type][suit_type].append(card)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
            for arcana_type, suits in arcana_groups.items():
                text_result += f"## {arcana_type} –∞—Ä–∫–∞–Ω\n\n"
                
                for suit_type, cards in suits.items():
                    if suit_type != '–ë–µ–∑ –º–∞—Å—Ç–∏':
                        text_result += f"### {suit_type}\n\n"
                    
                    for card in cards:
                        text_result += f"{card['id']}. **{card['name']}**\n"
                    
                    text_result += "\n"
        else:
            text_result += "–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        text_result += "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /card —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID –∫–∞—Ä—Ç—ã."
        
        return {"api_result_text": text_result}
    except Exception as e:
        return {"api_result_text": f"–û—à–∏–±–∫–∞: {str(e)}"}

@router.get("/three_cards", response_model=Dict[str, Any])
async def get_puzzlebot_three_cards(
    question: Optional[str] = Query(None, description="–í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è"),
    user_type: str = Query("free", description="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è "–¢—Ä–∏ –∫–∞—Ä—Ç—ã" –¥–ª—è PuzzleBot
    
    - **question**: –í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–∫–ª–∞–¥ "–¢—Ä–∏ –∫–∞—Ä—Ç—ã" (ID = 2)
    return await get_puzzlebot_reading(spread_id=2, question=question, user_type=user_type)

@router.get("/seven_cards", response_model=Dict[str, Any])
async def get_puzzlebot_seven_cards(
    question: Optional[str] = Query(None, description="–í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è"),
    user_type: str = Query("free", description="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è "–°–µ–º—å –∫–∞—Ä—Ç" –¥–ª—è PuzzleBot
    
    - **question**: –í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–∫–ª–∞–¥ "–°–µ–º—å –∫–∞—Ä—Ç" (ID = 6)
    return await get_puzzlebot_reading(spread_id=6, question=question, user_type=user_type)

@router.get("/celtic_cross", response_model=Dict[str, Any])
async def get_puzzlebot_celtic_cross(
    question: Optional[str] = Query(None, description="–í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è"),
    user_type: str = Query("free", description="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç" –¥–ª—è PuzzleBot
    
    - **question**: –í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–∫–ª–∞–¥ "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç" (ID = 3)
    return await get_puzzlebot_reading(spread_id=3, question=question, user_type=user_type)

@router.get("/relationship", response_model=Dict[str, Any])
async def get_puzzlebot_relationship(
    question: Optional[str] = Query(None, description="–í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è"),
    user_type: str = Query("free", description="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è" –¥–ª—è PuzzleBot
    
    - **question**: –í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–∫–ª–∞–¥ "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è" (ID = 4)
    return await get_puzzlebot_reading(spread_id=4, question=question, user_type=user_type)

@router.get("/wish_cards", response_model=Dict[str, Any])
async def get_puzzlebot_wish_cards(
    question: Optional[str] = Query(None, description="–ñ–µ–ª–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"),
    user_type: str = Query("free", description="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è "–ö–∞—Ä—Ç—ã –∂–µ–ª–∞–Ω–∏–π" –¥–ª—è PuzzleBot
    
    - **question**: –ñ–µ–ª–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–∫–ª–∞–¥ "–ö–∞—Ä—Ç—ã –∂–µ–ª–∞–Ω–∏–π" (ID = 5)
    return await get_puzzlebot_reading(spread_id=5, question=question, user_type=user_type)

@router.get("/horoscope", response_model=Dict[str, Any])
async def get_puzzlebot_horoscope(
    question: Optional[str] = Query(None, description="–í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è"),
    user_type: str = Query("free", description="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è "–ì–æ—Ä–æ—Å–∫–æ–ø" –¥–ª—è PuzzleBot
    
    - **question**: –í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–∫–ª–∞–¥ "–ì–æ—Ä–æ—Å–∫–æ–ø" (ID = 7)
    return await get_puzzlebot_reading(spread_id=7, question=question, user_type=user_type)

@router.get("/tree_of_life", response_model=Dict[str, Any])
async def get_puzzlebot_tree_of_life(
    question: Optional[str] = Query(None, description="–í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è"),
    user_type: str = Query("free", description="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è "–î—Ä–µ–≤–æ –∂–∏–∑–Ω–∏" –¥–ª—è PuzzleBot
    
    - **question**: –í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–∫–ª–∞–¥ "–î—Ä–µ–≤–æ –∂–∏–∑–Ω–∏" (ID = 8)
    return await get_puzzlebot_reading(spread_id=8, question=question, user_type=user_type) 