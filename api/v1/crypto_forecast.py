"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
"""
import logging
from typing import Dict, List, Any, Optional

from fastapi import APIRouter, Depends, HTTPException, Query, BackgroundTasks
from fastapi.responses import JSONResponse

from core.cache import CacheManager
from core.openrouter_client import OpenRouterClient
from modules.crypto_forecast.bybit_client import BybitClient
from modules.crypto_forecast.forecast_service import CryptoForecastService

logger = logging.getLogger(__name__)

router = APIRouter(
    prefix="/api/v1/crypto",
    tags=["crypto_forecast"]
)

async def get_cache_manager(router_instance) -> CacheManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ CacheManager –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return router_instance.app.state.cache_manager

async def get_crypto_forecast_service(router_instance) -> CryptoForecastService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ CryptoForecastService –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return router_instance.app.state.crypto_forecast_service

@router.get("/forecast/{symbol}")
async def get_crypto_forecast(
    symbol: str,
    period: str = Query("day", description="–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞: hour, day, week"),
    user_type: str = Query("free", description="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: free, premium"),
    force_refresh: bool = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞"),
    forecast_service: CryptoForecastService = Depends(get_crypto_forecast_service)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    
    - **symbol**: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC, ETH, SOL)
    - **period**: –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (hour, day, week)
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free, premium)
    - **force_refresh**: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
        if period not in ["hour", "day", "week"]:
            raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: hour, day, week")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_type not in ["free", "premium"]:
            user_type = "free"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø "free"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        forecast = await forecast_service.generate_forecast(
            symbol=symbol,
            period=period,
            user_type=user_type,
            force_refresh=force_refresh
        )
        
        return forecast
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {symbol}: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")

@router.get("/cryptos")
async def get_available_cryptos(
    forecast_service: CryptoForecastService = Depends(get_crypto_forecast_service)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    """
    try:
        cryptos = await forecast_service.get_available_cryptos()
        return cryptos
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {str(e)}")

@router.post("/puzzlebot/forecast")
async def puzzlebot_forecast(
    request: Dict[str, Any],
    forecast_service: CryptoForecastService = Depends(get_crypto_forecast_service)
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram-–±–æ—Ç–æ–º —á–µ—Ä–µ–∑ puzzlebot.top
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç puzzlebot.top –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    
    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:
    {
        "crypto_symbol": "BTC",
        "forecast_period": "day",
        "user_type": "free"
    }
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        symbol = request.get("crypto_symbol", "BTC")
        period = request.get("forecast_period", "day")
        user_type = request.get("user_type", "free")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –∫–æ–¥
        period_mapping = {
            "–ë–ª–∏–∂–∞–π—à–∏–π —á–∞—Å": "hour",
            "–ù–∞ –∑–∞–≤—Ç—Ä–∞": "day",
            "–ù–∞ –Ω–µ–¥–µ–ª—é": "week"
        }
        
        # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ —É–∫–∞–∑–∞–Ω –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ
        if period in period_mapping:
            period = period_mapping[period]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
        if period not in ["hour", "day", "week"]:
            return JSONResponse(
                status_code=400,
                content={
                    "status": "error",
                    "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: hour, day, week"
                }
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        forecast = await forecast_service.generate_forecast(
            symbol=symbol,
            period=period,
            user_type=user_type,
            force_refresh=False
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è puzzlebot.top
        response = {
            "status": "success",
            "forecast": forecast["forecast"],
            "symbol": forecast["symbol"],
            "current_price": forecast["current_price"],
            "generated_at": forecast["generated_at"]
        }
        
        return response
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç puzzlebot: {e}", exc_info=True)
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"
            }
        )

@router.post("/puzzlebot/welcome")
async def puzzlebot_welcome():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        welcome_message = {
            "status": "success",
            "welcome_message": "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö—Ä–∏–ø—Ç–æ-–ü—Ä–æ–≥–Ω–æ–∑!\n\n–ù–∞—à —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º.\n\nüìä –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"
        }
        
        return welcome_message
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
            }
        )

@router.post("/puzzlebot/crypto_info")
async def puzzlebot_crypto_info(
    request: Dict[str, Any],
    forecast_service: CryptoForecastService = Depends(get_crypto_forecast_service)
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç puzzlebot.top –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    
    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:
    {
        "crypto_symbol": "BTC"
    }
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        symbol = request.get("crypto_symbol", "BTC")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª (–¥–æ–±–∞–≤–ª—è–µ–º USDT, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
        if not symbol.endswith("USDT"):
            symbol_with_usdt = f"{symbol}USDT"
        else:
            symbol_with_usdt = symbol
            symbol = symbol.replace("USDT", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
        try:
            market_data = await forecast_service.bybit_client.get_market_data(symbol_with_usdt)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
            current_price = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            price_change_24h = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            if "list" in market_data["ticker"] and market_data["ticker"]["list"] and len(market_data["ticker"]["list"]) > 0:
                ticker_data = market_data["ticker"]["list"][0]
                current_price = ticker_data.get("lastPrice", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ 24 —á–∞—Å–∞
                if "prevPrice24h" in ticker_data and ticker_data["prevPrice24h"] and "price24hPcnt" in ticker_data:
                    price_change_24h = ticker_data.get("price24hPcnt", "0")
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫
                    try:
                        price_change_pct = float(price_change_24h) * 100
                        price_change_24h = f"{'+' if price_change_pct >= 0 else ''}{price_change_pct:.2f}%"
                    except (ValueError, TypeError):
                        price_change_24h = "0.00%"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            crypto_names = {
                "BTC": "Bitcoin",
                "ETH": "Ethereum",
                "SOL": "Solana",
                "BNB": "Binance Coin",
                "XRP": "Ripple",
                "ADA": "Cardano",
                "DOGE": "Dogecoin",
                "DOT": "Polkadot",
                "AVAX": "Avalanche",
                "MATIC": "Polygon",
                "LINK": "Chainlink",
                "UNI": "Uniswap",
                "ATOM": "Cosmos",
                "LTC": "Litecoin",
                "ALGO": "Algorand",
                "NEAR": "NEAR Protocol",
                "FTM": "Fantom",
                "AAVE": "Aave",
                "GRT": "The Graph",
                "SNX": "Synthetix"
            }
            
            full_name = crypto_names.get(symbol, symbol)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = {
                "status": "success",
                "symbol": symbol,
                "full_name": full_name,
                "current_price": current_price,
                "price_change_24h": price_change_24h,
                "message": f"üí∞ {symbol} - {full_name}\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price}\n24—á –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {price_change_24h}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:"
            }
            
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ {symbol}: {e}", exc_info=True)
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            crypto_names = {
                "BTC": "Bitcoin",
                "ETH": "Ethereum",
                "SOL": "Solana",
                "BNB": "Binance Coin",
                "XRP": "Ripple"
            }
            
            full_name = crypto_names.get(symbol, symbol)
            
            response = {
                "status": "success",
                "symbol": symbol,
                "full_name": full_name,
                "current_price": "–ó–∞–≥—Ä—É–∑–∫–∞...",
                "price_change_24h": "–ó–∞–≥—Ä—É–∑–∫–∞...",
                "message": f"üí∞ {symbol} - {full_name}\n\n–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:"
            }
            
            return response
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ: {e}", exc_info=True)
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ: {str(e)}"
            }
        )

@router.post("/puzzlebot/disclaimer")
async def puzzlebot_disclaimer():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫–∞–∑–∞ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–∫–∞–∑–∞ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
    """
    try:
        disclaimer = {
            "status": "success",
            "disclaimer": "‚ö†Ô∏è –û–¢–ö–ê–ó –û–¢ –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò\n\n–í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Å–æ–≤–µ—Ç–æ–º. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å–≤—è–∑–∞–Ω—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º, –∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n\n–ü—Ä–∏–Ω–∏–º–∞—è —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–µ –∞–∫—Ç–∏–≤–æ–≤, –ø–æ–ª–∞–≥–∞–π—Ç–µ—Å—å –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞–º–∏.\n\n–ö–æ–º–∞–Ω–¥–∞ –ö—Ä–∏–ø—Ç–æ-–ü—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ—Ç–µ—Ä–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        }
        
        return disclaimer
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫–∞–∑–∞ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: {e}", exc_info=True)
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫–∞–∑–∞ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: {str(e)}"
            }
        )

@router.post("/puzzlebot/market_data")
async def puzzlebot_market_data(
    request: Dict[str, Any],
    forecast_service: CryptoForecastService = Depends(get_crypto_forecast_service)
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç puzzlebot.top –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –º–æ–¥–µ–ª—å
    
    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:
    {
        "crypto_symbol": "BTC",
        "period": "day"
    }
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        symbol = request.get("crypto_symbol", "BTC")
        period = request.get("period", "day")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –∫–æ–¥
        period_mapping = {
            "–ë–ª–∏–∂–∞–π—à–∏–π —á–∞—Å": "hour",
            "–ù–∞ –∑–∞–≤—Ç—Ä–∞": "day",
            "–ù–∞ –Ω–µ–¥–µ–ª—é": "week"
        }
        
        # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ —É–∫–∞–∑–∞–Ω –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ
        if period in period_mapping:
            period = period_mapping[period]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
        if period not in ["hour", "day", "week"]:
            period = "day"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–Ω–µ–≤–Ω–æ–π –ø–µ—Ä–∏–æ–¥
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª (–¥–æ–±–∞–≤–ª—è–µ–º USDT, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
        if not symbol.endswith("USDT"):
            symbol_with_usdt = f"{symbol}USDT"
        else:
            symbol_with_usdt = symbol
            symbol = symbol.replace("USDT", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
        market_data = await forecast_service.bybit_client.get_market_data(symbol_with_usdt)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        current_price = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if "list" in market_data["ticker"] and market_data["ticker"]["list"] and len(market_data["ticker"]["list"]) > 0:
            current_price = market_data["ticker"]["list"][0].get("lastPrice", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –º–æ–¥–µ–ª—å
        simplified_data = {
            "symbol": symbol,
            "current_price": current_price,
            "ticker": market_data["ticker"],
            "period": period
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
        if period == "hour":
            # –î–ª—è —á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
            simplified_data["historical_data"] = {
                "1h": market_data["historical_data"].get("1h", [])[:24]
            }
        elif period == "day":
            # –î–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤—ã–µ –∏ 4-—á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            simplified_data["historical_data"] = {
                "1h": market_data["historical_data"].get("1h", [])[:24],
                "4h": market_data["historical_data"].get("4h", [])[:24]
            }
        else:  # week
            # –î–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            simplified_data["historical_data"] = {
                "1h": market_data["historical_data"].get("1h", [])[:24],
                "4h": market_data["historical_data"].get("4h", [])[:42],
                "1d": market_data["historical_data"].get("1d", [])[:30]
            }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            "status": "success",
            "market_data": simplified_data
        }
        
        return response
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}", exc_info=True)
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            }
        ) 