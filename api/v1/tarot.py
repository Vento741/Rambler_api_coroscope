"""
–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ –¢–∞—Ä–æ —á–µ—Ä–µ–∑ OpenRouter
"""
from typing import Optional, List, Dict, Any, Union
from fastapi import APIRouter, HTTPException, Query, Path, Depends, Response
from PIL import Image, ImageDraw, ImageFont
import requests
from io import BytesIO
import asyncio
import aiohttp
import os
import json
from datetime import datetime

from modules.tarot.models import ApiResponse, TarotReadingRequest, TarotCard, TarotSpread
from modules.tarot.openrouter_service import TarotOpenRouterService
from modules.tarot.data import get_all_cards, get_card_by_id, get_all_spreads, get_spread_by_id
from core.cache import CacheManager
from core.openrouter_client import OpenRouterClient
import config

router = APIRouter(prefix="/api/v1/tarot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
cache_manager = CacheManager(ttl_minutes=config.CACHE_TTL_MINUTES)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
openrouter_client = OpenRouterClient(
    api_url=config.OPENROUTER_API_URL,
    api_keys=config.OPENROUTER_API_KEYS,
    models=config.OPENROUTER_MODELS,
    model_configs=config.OPENROUTER_MODEL_CONFIGS,
    model_api_keys=config.OPENROUTER_MODEL_API_KEYS,
    timeout=30  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
tarot_service = TarotOpenRouterService(
    cache_manager=cache_manager,
    openrouter_client=openrouter_client,
    prompts_config=config.TAROT_PROMPTS
)

@router.get("/cards", response_model=Dict[str, Any])
async def get_cards():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç –¢–∞—Ä–æ
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –¢–∞—Ä–æ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    """
    cards = get_all_cards()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —É–¥–æ–±–Ω–æ–º –¥–ª—è PuzzleBot
    result = {
        "success": True,
        "cards_count": len(cards),
        "cards": cards
    }
    
    return result

@router.get("/card/{card_id}", response_model=Dict[str, Any])
async def get_card(card_id: int = Path(..., description="ID –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ")):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ –¢–∞—Ä–æ
    
    - **card_id**: ID –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ
    """
    card = get_card_by_id(card_id)
    if not card:
        raise HTTPException(
            status_code=404,
            detail=f"–ö–∞—Ä—Ç–∞ —Å ID {card_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —É–¥–æ–±–Ω–æ–º –¥–ª—è PuzzleBot
    result = {
        "success": True,
        "card": card
    }
    
    return result

@router.get("/spreads", response_model=Dict[str, Any])
async def get_spreads():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –∫–∞—Ä—Ç
    """
    spreads = get_all_spreads()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —É–¥–æ–±–Ω–æ–º –¥–ª—è PuzzleBot
    result = {
        "success": True,
        "spreads_count": len(spreads),
        "spreads": spreads
    }
    
    return result

@router.get("/spread/{spread_id}", response_model=Dict[str, Any])
async def get_spread(spread_id: int = Path(..., description="ID —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ")):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–∞—Å–∫–ª–∞–¥–µ –¢–∞—Ä–æ
    
    - **spread_id**: ID —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ
    """
    spread = get_spread_by_id(spread_id)
    if not spread:
        raise HTTPException(
            status_code=404,
            detail=f"–†–∞—Å–∫–ª–∞–¥ —Å ID {spread_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —É–¥–æ–±–Ω–æ–º –¥–ª—è PuzzleBot
    result = {
        "success": True,
        "spread": spread
    }
    
    return result

@router.post("/reading", response_model=Dict[str, Any])
async def get_reading(request: TarotReadingRequest):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ
    
    - **spread_id**: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
    - **question**: –í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if request.user_type not in ["free", "premium"]:
        raise HTTPException(
            status_code=400,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: free, premium"
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞
    spread = get_spread_by_id(request.spread_id)
    if not spread:
        raise HTTPException(
            status_code=404,
            detail=f"–†–∞—Å–∫–ª–∞–¥ —Å ID {request.spread_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è
    response = await tarot_service.get_tarot_reading(
        spread_id=request.spread_id,
        question=request.question,
        user_type=request.user_type
    )
    
    # –î–ª—è PuzzleBot –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if response.success:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        result = {
            "success": True,
            "reading_data": {
                "spread_id": request.spread_id,
                "spread_name": spread["name"],
                "question": request.question if request.question else "–û–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ",
                "timestamp": datetime.now().isoformat(),
                "cards": response.data["cards"],
                "interpretation": response.data["interpretation"],
                "card_count": len(response.data["cards"])
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å URLs –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ PuzzleBot
        cards_urls = [card["card_image_url"] for card in response.data["cards"]]
        positions = [card["position_name"] for card in response.data["cards"]]
        
        result["reading_data"]["card_urls"] = ",".join(cards_urls)
        result["reading_data"]["positions"] = ",".join(positions)
        
        # –°–æ–∑–¥–∞–µ–º HTML-—Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç –≤ PuzzleBot
        html_cards = ""
        for card in response.data["cards"]:
            html_cards += f'<div class="tarot-card">'
            html_cards += f'<img src="{card["card_image_url"]}" alt="{card["card_name"]}" />'
            html_cards += f'<div class="position">{card["position_name"]}</div>'
            html_cards += f'<div class="card-name">{card["card_name"]} {"(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)" if card["is_reversed"] else ""}</div>'
            html_cards += f'</div>'
        
        result["reading_data"]["html_cards"] = html_cards
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–±–æ—Ç–∞
        text_result = f"üîÆ {spread['name']} üîÆ\n\n"
        text_result += f"–í–æ–ø—Ä–æ—Å: {request.question if request.question else '–û–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ'}\n\n"
        text_result += "–í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã:\n"
        
        for card in response.data["cards"]:
            text_result += f"‚Ä¢ {card['position_name']}: {card['card_name']} {'(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' if card['is_reversed'] else ''}\n"
        
        text_result += "\nüåü –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è üåü\n\n"
        text_result += response.data["interpretation"]
        
        result["reading_data"]["text_result"] = text_result
        
        return result
    else:
        return {
            "success": False,
            "error": response.error
        }

@router.get("/reading", response_model=Dict[str, Any])
async def get_reading_get(
    spread_id: int = Query(..., description="ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞"),
    question: Optional[str] = Query(None, description="–í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è"),
    user_type: str = Query("free", description="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ (GET –º–µ—Ç–æ–¥)
    
    - **spread_id**: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
    - **question**: –í–æ–ø—Ä–æ—Å –¥–ª—è –≥–∞–¥–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)
    """
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ POST-–º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
    request = TarotReadingRequest(
        spread_id=spread_id,
        question=question,
        user_type=user_type
    )
    return await get_reading(request)

@router.get("/daily_card", response_model=Dict[str, Any])
async def get_daily_card(
    user_type: str = Query("free", description="–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è
    
    - **user_type**: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free/premium)
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ–¥–Ω—É –∫–∞—Ä—Ç—É (ID = 1)
    request = TarotReadingRequest(
        spread_id=1,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ä–∞—Å–∫–ª–∞–¥ —Å ID=1 - —ç—Ç–æ —Ä–∞—Å–∫–ª–∞–¥ "–ö–∞—Ä—Ç–∞ –¥–Ω—è"
        question="–ö–∞—Ä—Ç–∞ –¥–Ω—è",
        user_type=user_type
    )
    
    return await get_reading(request)

@router.get("/combined_data", response_model=Dict[str, Any])
async def get_combined_data(
    card_id: Optional[int] = Query(None, description="ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"),
    spread_id: Optional[int] = Query(None, description="ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä—Ç–∞—Ö –∏ —Ä–∞—Å–∫–ª–∞–¥–∞—Ö –¢–∞—Ä–æ
    
    - **card_id**: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - **spread_id**: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã card_id –∏ spread_id, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç –∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω card_id, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ
    –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω spread_id, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–∞—Å–∫–ª–∞–¥–µ
    """
    result = {
        "success": True,
        "data_type": "combined",
        "timestamp": datetime.now().isoformat()
    }
    
    if card_id is not None:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ
        card = get_card_by_id(card_id)
        if not card:
            raise HTTPException(
                status_code=404,
                detail=f"–ö–∞—Ä—Ç–∞ —Å ID {card_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        result["data_type"] = "card_details"
        result["card"] = card
    elif spread_id is not None:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–∞—Å–∫–ª–∞–¥–µ
        spread = get_spread_by_id(spread_id)
        if not spread:
            raise HTTPException(
                status_code=404,
                detail=f"–†–∞—Å–∫–ª–∞–¥ —Å ID {spread_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        result["data_type"] = "spread_details"
        result["spread"] = spread
    else:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–∞—Ö –∏ —Ä–∞—Å–∫–ª–∞–¥–∞—Ö
        cards = get_all_cards()
        spreads = get_all_spreads()
        
        # –£–ø—Ä–æ—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∞–∫–æ–Ω–∏—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        simple_cards = [{"id": card["id"], "name": card["name"], "arcana": card["arcana"], "suit": card["suit"]} for card in cards]
        simple_spreads = [{"id": spread["id"], "name": spread["name"], "card_count": spread["card_count"]} for spread in spreads]
        
        result["data_type"] = "basic_lists"
        result["cards"] = simple_cards
        result["spreads"] = simple_spreads
        result["cards_count"] = len(cards)
        result["spreads_count"] = len(spreads)
    
    return result

@router.get("/generate_card_image", response_class=Response)
async def generate_card_image(
    card_id: int = Query(..., description="ID –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ"),
    is_reversed: bool = Query(False, description="–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è –∫–∞—Ä—Ç–∞ (true/false)")
):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ
    
    - **card_id**: ID –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ
    - **is_reversed**: –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è –∫–∞—Ä—Ç–∞ (true/false)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG.
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
    card = get_card_by_id(card_id)
    if not card:
        raise HTTPException(
            status_code=404,
            detail=f"–ö–∞—Ä—Ç–∞ —Å ID {card_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    try:
        response = requests.get(card["image_url"])
        if response.status_code != 200:
            raise HTTPException(
                status_code=500,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã"
            )
        
        image_data = BytesIO(response.content)
        image = Image.open(image_data)
        
        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if is_reversed:
            image = image.rotate(180)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ä—Ç—ã
        draw = ImageDraw.Draw(image)
        
        try:
            font = ImageFont.truetype("arial.ttf", 20)
        except:
            font = ImageFont.load_default()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—É—é –ø–æ–ª–æ—Å—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        width, height = image.size
        overlay = Image.new('RGBA', (width, 40), (0, 0, 0, 180))
        image.paste(overlay, (0, height - 40), overlay)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        title = f"{card['name']} ({('–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è' if is_reversed else '–ü—Ä—è–º–∞—è')})"
        draw.text((10, height - 35), title, fill=(255, 255, 255), font=font)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ BytesIO –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        output = BytesIO()
        image.save(output, format="JPEG", quality=95)
        output.seek(0)
        
        return Response(content=output.getvalue(), media_type="image/jpeg")
        
    except HTTPException as e:
        raise e
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        )

@router.get("/generate_reading_image", response_class=Response)
async def generate_reading_image(
    spread_id: int = Query(..., description="ID —Ä–∞—Å–∫–ª–∞–¥–∞"),
    card_ids: str = Query(..., description="–°–ø–∏—Å–æ–∫ ID –∫–∞—Ä—Ç, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏"),
    reversed_flags: str = Query("", description="–°–ø–∏—Å–æ–∫ —Ñ–ª–∞–≥–æ–≤ '–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏' –∫–∞—Ä—Ç (0/1), —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏"),
    title: Optional[str] = Query(None, description="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ
    
    - **spread_id**: ID —Ä–∞—Å–∫–ª–∞–¥–∞
    - **card_ids**: –°–ø–∏—Å–æ–∫ ID –∫–∞—Ä—Ç, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏
    - **reversed_flags**: –°–ø–∏—Å–æ–∫ —Ñ–ª–∞–≥–æ–≤ '–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏' –∫–∞—Ä—Ç (0/1), —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏
    - **title**: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG.
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–∫–ª–∞–¥–µ
    spread = get_spread_by_id(spread_id)
    if not spread:
        raise HTTPException(
            status_code=404,
            detail=f"–†–∞—Å–∫–ª–∞–¥ —Å ID {spread_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–∫–∏ ID –∫–∞—Ä—Ç –∏ —Ñ–ª–∞–≥–æ–≤ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏
    card_id_list = [int(x) for x in card_ids.split(",")]
    
    if reversed_flags:
        reversed_list = [x == "1" for x in reversed_flags.split(",")]
    else:
        reversed_list = [False] * len(card_id_list)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç –∏ —Ñ–ª–∞–≥–æ–≤
    if len(card_id_list) != len(reversed_list):
        raise HTTPException(
            status_code=400,
            detail="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –∏ —Ñ–ª–∞–≥–æ–≤ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç –∏ –ø–æ–∑–∏—Ü–∏–π –≤ —Ä–∞—Å–∫–ª–∞–¥–µ
    if len(card_id_list) != len(spread["positions"]):
        raise HTTPException(
            status_code=400,
            detail=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç ({len(card_id_list)}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∑–∏—Ü–∏–π –≤ —Ä–∞—Å–∫–ª–∞–¥–µ ({len(spread['positions'])})"
        )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö
    cards = []
    for card_id in card_id_list:
        card = get_card_by_id(card_id)
        if not card:
            raise HTTPException(
                status_code=404,
                detail=f"–ö–∞—Ä—Ç–∞ —Å ID {card_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        cards.append(card)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç
    card_images = []
    for card in cards:
        try:
            response = requests.get(card["image_url"])
            if response.status_code == 200:
                card_images.append(Image.open(BytesIO(response.content)))
            else:
                raise HTTPException(
                    status_code=500,
                    detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã {card['name']}"
                )
        except Exception as e:
            raise HTTPException(
                status_code=500,
                detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
            )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞—Å–∫–ª–∞–¥–∞
    if spread_id == 1:  # –ö–∞—Ä—Ç–∞ –¥–Ω—è
        width, height = 600, 800
        card_width, card_height = 400, 600
        positions_xy = [(100, 100)]
    elif spread_id == 2:  # –†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ç—Ä–∏ –∫–∞—Ä—Ç—ã
        width, height = 1200, 600
        card_width, card_height = 300, 450
        positions_xy = [(100, 75), (450, 75), (800, 75)]
    elif spread_id == 3:  # –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç
        width, height = 1200, 1200
        card_width, card_height = 200, 300
        positions_xy = [
            (500, 450),  # –¶–µ–Ω—Ç—Ä
            (500, 450),  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (—Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º)
            (500, 800),  # –û—Å–Ω–æ–≤–∞
            (500, 100),  # –ö–æ—Ä–æ–Ω–∞
            (150, 450),  # –ü—Ä–æ—à–ª–æ–µ
            (850, 450),  # –ë—É–¥—É—â–µ–µ
            (900, 800),  # –í—ã —Å–∞–º–∏
            (900, 600),  # –í–Ω–µ—à–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è
            (900, 400),  # –ù–∞–¥–µ–∂–¥—ã/—Å—Ç—Ä–∞—Ö–∏
            (900, 200),  # –ò—Ç–æ–≥
        ]
    elif spread_id == 4:  # –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
        width, height = 1200, 800
        card_width, card_height = 200, 300
        positions_xy = [
            (200, 250),  # –í—ã
            (800, 250),  # –ü–∞—Ä—Ç–Ω–µ—Ä
            (500, 100),  # –°–≤—è–∑—å
            (300, 500),  # –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
            (700, 500),  # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª
        ]
    else:  # –û–±—â–∏–π —Å–ª—É—á–∞–π
        card_width, card_height = 200, 300
        width = 150 + (card_width + 50) * len(card_images)
        height = 600
        positions_xy = [(150 + i * (card_width + 50), 150) for i in range(len(card_images))]
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–ª–∞–∂–∞
    collage = Image.new('RGB', (width, height), (30, 30, 50))
    draw = ImageDraw.Draw(collage)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç
    try:
        font = ImageFont.truetype("arial.ttf", 24)
        small_font = ImageFont.truetype("arial.ttf", 18)
    except:
        font = ImageFont.load_default()
        small_font = ImageFont.load_default()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if title:
        draw.text((width//2 - len(title)*7, 30), title, fill=(255, 255, 255), font=font)
    else:
        draw.text((width//2 - len(spread["name"])*7, 30), spread["name"], fill=(255, 255, 255), font=font)
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—ã
    for i, (card_img, is_reversed, position, (x, y)) in enumerate(zip(card_images, reversed_list, spread["positions"], positions_xy)):
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        card_img = card_img.resize((card_width, card_height))
        
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ –∏–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞ –≤ –ö–µ–ª—å—Ç—Å–∫–æ–º –∫—Ä–µ—Å—Ç–µ
        if is_reversed:
            card_img = card_img.rotate(180)
        elif spread_id == 3 and i == 1:  # –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç, –≤—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞ (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ)
            card_img = card_img.rotate(90, expand=True)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        collage.paste(card_img, (x, y))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        position_name = position["name"]
        text_width = len(position_name) * 7
        draw.text((x + card_width//2 - text_width//2, y + card_height + 10), 
                 position_name, fill=(255, 255, 255), font=small_font)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    draw.text((10, height - 30), f"–°–æ–∑–¥–∞–Ω–æ: {timestamp}", fill=(180, 180, 180), font=small_font)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–ª–∞–∂ –≤ BytesIO –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    output = BytesIO()
    collage.save(output, format="JPEG", quality=95)
    output.seek(0)
    
    return Response(content=output.getvalue(), media_type="image/jpeg") 