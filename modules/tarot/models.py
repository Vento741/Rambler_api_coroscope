"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ –¢–∞—Ä–æ
"""
from typing import List, Dict, Any, Optional, Union
from pydantic import BaseModel, Field
from datetime import datetime


class TarotCard(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ"""
    id: int
    name: str
    arcana: str  # –°—Ç–∞—Ä—à–∏–π –∏–ª–∏ –ú–ª–∞–¥—à–∏–π –ê—Ä–∫–∞–Ω
    suit: Optional[str] = None  # –ú–∞—Å—Ç—å (–¥–ª—è –ú–ª–∞–¥—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤)
    image_url: str
    keywords_upright: List[str]
    keywords_reversed: List[str]
    description: str
    meaning_upright: str
    meaning_reversed: str


class TarotCardPosition(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –∫–∞—Ä—Ç—ã –≤ —Ä–∞—Å–∫–ª–∞–¥–µ"""
    position: int
    name: str
    description: str


class TarotSpread(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ"""
    id: int
    name: str
    description: str
    positions: List[TarotCardPosition]
    card_count: int


class TarotReadingRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–∞–¥–∞–Ω–∏—è"""
    spread_id: int
    question: Optional[str] = None
    user_type: str = "free"  # "free" –∏–ª–∏ "premium"


class TarotReading(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–∞–¥–∞–Ω–∏—è"""
    spread: TarotSpread
    cards: List[Dict[str, Any]]
    interpretation: str
    created_at: datetime = Field(default_factory=datetime.now)
    question: Optional[str] = None


class ApiResponse(BaseModel):
    """–û–±—â–∞—è –º–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ API"""
    success: bool
    data: Optional[Union[str, Dict[str, Any], List[Dict[str, Any]]]] = None
    error: Optional[str] = None
    model: Optional[str] = None
    cached: bool = False


class PuzzleBotResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è PuzzleBot"""
    success: bool = True
    api_result_text: str  # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PuzzleBot
    html_cards: Optional[str] = None  # HTML-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç
    card_urls: Optional[str] = None  # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    positions: Optional[str] = None  # –ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    timestamp: Optional[str] = None
    spread_name: Optional[str] = None
    error: Optional[str] = None

    @classmethod
    def from_reading(cls, reading_data: Dict[str, Any]) -> "PuzzleBotResponse":
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è PuzzleBot –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–∞–¥–∞–Ω–∏—è"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–±–æ—Ç–∞
        text_result = f"üîÆ {reading_data['spread']['name']} üîÆ\n\n"
        text_result += f"–í–æ–ø—Ä–æ—Å: {reading_data.get('question', '–û–±—â–µ–µ –≥–∞–¥–∞–Ω–∏–µ')}\n\n"
        text_result += "–í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã:\n"
        
        for card in reading_data['cards']:
            text_result += f"‚Ä¢ {card['position_name']}: {card['card_name']} {'(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' if card['is_reversed'] else ''}\n"
        
        text_result += "\nüåü –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è üåü\n\n"
        text_result += reading_data['interpretation']
        
        # –°–æ–∑–¥–∞–µ–º HTML-—Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç
        html_cards = ""
        for card in reading_data['cards']:
            html_cards += f'<div class="tarot-card">'
            html_cards += f'<img src="{card["card_image_url"]}" alt="{card["card_name"]}" />'
            html_cards += f'<div class="position">{card["position_name"]}</div>'
            html_cards += f'<div class="card-name">{card["card_name"]} {"(–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)" if card["is_reversed"] else ""}</div>'
            html_cards += f'</div>'
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å URLs –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        cards_urls = [card["card_image_url"] for card in reading_data['cards']]
        positions = [card["position_name"] for card in reading_data['cards']]
        
        return cls(
            success=True,
            api_result_text=text_result,
            html_cards=html_cards,
            card_urls=",".join(cards_urls),
            positions=",".join(positions),
            timestamp=datetime.now().isoformat(),
            spread_name=reading_data['spread']['name']
        )
    
    @classmethod
    def error_response(cls, error_message: str) -> "PuzzleBotResponse":
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π –¥–ª—è PuzzleBot"""
        return cls(
            success=False,
            api_result_text=f"–û—à–∏–±–∫–∞: {error_message}",
            error=error_message
        ) 